<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zonggen's Blog</title><link>https://zonggen.github.io/</link><description>Recent content on Zonggen's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Zonggen Bai</copyright><lastBuildDate>Wed, 22 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zonggen.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Access network of MongoDB service on OKD with docker-compose</title><link>https://zonggen.github.io/posts/2020-01-22-docker-compose-on-oc/</link><pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2020-01-22-docker-compose-on-oc/</guid><description>I was trying to set up a Golang server with a MongoDB database for FCOS Pinger Backend using docker-compose (alias docker-compose=podman-compose), but I was struggling to access the MongoDB container from server container with error message saying Connection refused. Tried adding a router, but that didn&amp;rsquo;t work.
After researching and learning about networks on Openshift/Kubernetes, it turns out that the server code clientOptions := options.Client().ApplyURI(&amp;quot;mongodb://localhost:27017&amp;quot;) needs to be clientOptions := options.</description></item><item><title>Messed up my laptop by trying to run Podman inside Podman</title><link>https://zonggen.github.io/posts/2020-01-18-selinux-messed-up/</link><pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2020-01-18-selinux-messed-up/</guid><description>So I tried to run a container inside a container with podman, which involves running podman-compose inside a wrapper conainer (fedora:latest). I&amp;rsquo;ve always got this error message:
ERRO[0000] 'overlay' is not supported over overlayfs Error: could not get runtime: 'overlay' is not supported over overlayfs: backing file system is unsupported for this graph driver So I ran sudo podman --privileged -v /var/lib/containers:/var/lib/containers -v /var/run:/var/run ..., which is my last hope after trying so many methods.</description></item><item><title>Creating a Daemon process with Systemd</title><link>https://zonggen.github.io/posts/2019-10-24-systemd-daemon/</link><pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2019-10-24-systemd-daemon/</guid><description>Just want to make a note on how to create a daemon process with systemd service file. When I&amp;rsquo;m working on Fedora CoreOS Pinger client side, the following systemd service file will hang at the boot process and eventually timeout afer 1m34s.
[Unit] Description=Telemetry service for Fedora CoreOS Documentation=https://github.com/coreos/fedora-coreos-pinger Before=systemd-user-sessions.service Wants=network-online.target After=network-online.target [Service] DynamicUser=yes Type=forking StateDirectory=fedora-coreos-pinger ExecStart=/usr/libexec/fedora-coreos-pinger [Install] WantedBy=multi-user.target The reason behind this is that systemd expects the process called by ExecStart= to call fork() and terminate the parent process so that the child processs could be orphaned and finally become a Daemon process that running in the background.</description></item><item><title>Thoughts when learning Rust</title><link>https://zonggen.github.io/posts/2019-09-11-work-update-3/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2019-09-11-work-update-3/</guid><description>These two days I have been learning Rust. Unlike Javascript, I would love to learn Rust more throughly since multiple of our projects uses Rust and we are also planning to migrate to Rust for coreos-assembler so it might be very helpful to have good fundamentals.
Here is a summary of unique feature that Rust has comparing to C, Java, Python and Haskell, to which Rust somewhat resembles in some way:</description></item><item><title>[TLDR] GRUB, dracut, systemd and Bootup Process</title><link>https://zonggen.github.io/posts/2019-06-27-systemd-dracut-and-bootup-process/</link><pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2019-06-27-systemd-dracut-and-bootup-process/</guid><description>BIOS POST: issues interrupt INT13H to find boot sectors on bootable device Boot Loaders (LILO / GRUB / GRUB2): loads Linux Kernel into memory and running stage1: runs bootstrap code that loaded by BIOS POST in Master Boot Record (MBR) stage1 does not understand file system, the only purpose of stage1 is to locate and load stage1.5 stage2: locates the stage 2 files in the /boot filesystem and load the needed drivers.</description></item><item><title>Note on #Git</title><link>https://zonggen.github.io/posts/2019-06-18-note-on-git/</link><pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2019-06-18-note-on-git/</guid><description>Note on git:
Pretty print the contents of the commit logs in a given format:
git show --format=fuller git commit --amend --author &amp;quot;Allen Bai &amp;lt;abai@redhat.com&amp;gt;&amp;quot; Test a PR locally:
git fetch &amp;lt;remote&amp;gt; pull/&amp;lt;id&amp;gt;/head (check this out) Other notes:
git show --format=fuller FETCH_HEAD git checkout &amp;lt;previous commit_id&amp;gt; &amp;lt;file_name&amp;gt; git show --stat HEAD</description></item><item><title>Working with CoreOS Assembler Scripts</title><link>https://zonggen.github.io/posts/2019-06-17-work-update-2/</link><pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2019-06-17-work-update-2/</guid><description>Working with CoreOS Assembler Scripts 1 2 3 $ export COREOS_ASSEMBLER_PRIVILEGED=true $ cosa init https://github.com/coreos/fedora-coreos-config $ cosa fetch &amp;amp;&amp;amp; cosa build To eliminate the error message:
[dumb-init] /usr/bin/coreos-assembler: Permission denied
Run following commands:
1 2 3 $ setfacl -R -m u:1000:rwx /path/to/github.com/coreos/coreos-assembler/ $ setfacl -R -d -m u:1000:rwx /path/to/github.com/coreos/coreos-assembler/ $ chcon -R system_u:object_r:container_file_t:s0 /path/to/github.com/coreos/coreos-assembler/</description></item><item><title>Random Bits During Work</title><link>https://zonggen.github.io/posts/2019-06-13-work-update-1/</link><pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2019-06-13-work-update-1/</guid><description>Start looking into issue#445 on CoreOS Assembler:
xz format Downside bzip2 vs. xz vs. gzip2 lzma algo Taking notes:
gzip uses DEFLATE algorithm xz uses LZMA2 Process of cosa init &amp;amp;&amp;amp; cosa build &amp;amp;&amp;amp; cosa run: download a cosa image that has all of the scripts installed spin up a container using the image just downloaded spin up a vm that built from the local fcos image that is built with FCOS config, inside the cosa container Run:</description></item><item><title>FCOS Project Structure Overview</title><link>https://zonggen.github.io/posts/2019-06-09-fcos-project-structure-overfiew/</link><pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2019-06-09-fcos-project-structure-overfiew/</guid><description>![Project Structure]({{ &amp;ldquo;/assets/img/posts/project-structure.png&amp;rdquo; | absolute_url }} &amp;ldquo;Project Structure&amp;rdquo;)
Because of the acquisition, the project structure confused me quite a lot. Plus the on-board documentation is so lengthy..ish. Above is the summary of my understanding of our project structure after some research. Please correct me if I&amp;rsquo;m wrong, and also I might update this throughout my internship @Red Hat FCOS team.</description></item><item><title>HHKB</title><link>https://zonggen.github.io/posts/2018-07-19-hhkb/</link><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2018-07-19-hhkb/</guid><description>Introducing my end-game keyboard (maybe?):
Name: HHKB Type-S
Switch: 45g Topre Silenced
Keycap: PBT
Additional Keycaps:
PFU Color Key Top Set (PD-KB400KT01) Massdrop Topre PBT Space Bar (https://www.massdrop.com/buy/topre-pbt-spacebar) Artisan Keycap &amp;lsquo;Trooper - Black Red&amp;rsquo; (https://www.hotkeysproject.com/products/trooper-black-red) As of today (7/19/2018), the artisan keycap is still available on the website. It was shipped from Hong Kong and took about 10 days to deliver (pretty satisfied about the shipping comparing to 3 months for the PFU one).</description></item><item><title>Fibonacci Closure in #Golang</title><link>https://zonggen.github.io/posts/2018-06-18-fibonacci-closure-in-golang/</link><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2018-06-18-fibonacci-closure-in-golang/</guid><description>Referring to the Go Tutorial, Go has closures, which allows us to return functions that can access and bound to the variables outside of their bodies. Basically, the variable is distinct among different specific instance of closures.
Here is an implementation of the function fibonacci that prints successive fibonacci numbers using a closure (from Go Tutorial exercise):
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // fibonacci is a function that returns // a function that returns an int.</description></item><item><title>CLRS Question</title><link>https://zonggen.github.io/posts/2018-06-11-clrs-question/</link><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2018-06-11-clrs-question/</guid><description>This weekend I have been working on the CSC263 assignment. There was one question regarding augmenting data structure that was on the CLRS I found interesting:
Consider n chords on a circle, each defined by its endpoints. Describe an O(nlgn) time algorithm to determine the number of pairs of chords that intersect inside the circle. (For example, if the n chords are all diameters that meet at the center, then the correct answer is nC2).</description></item><item><title>Work Notes > /dev/null</title><link>https://zonggen.github.io/posts/2018-06-06-notes/</link><pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2018-06-06-notes/</guid><description># Notes for my own reference: &amp;gt; language specific shell parameter expansion &amp;gt; fcos ART = Automated Release Tooling Testing ignition-dracut changes locally in Fedora CoreOS &amp;gt; linux kernel kargs http://man7.org/linux/man-pages/man5/proc.5.html https://www.tecmint.com/exploring-proc-file-system-in-linux/ &amp;gt; blog blog update install jekyll, bundler (1.12) jekyll serve gem install ffi &amp;ndash;platform=ruby</description></item><item><title>Welcome Letter</title><link>https://zonggen.github.io/posts/2018-06-05-welcome-letter/</link><pubDate>Tue, 05 Jun 2018 15:28:53 +0000</pubDate><guid>https://zonggen.github.io/posts/2018-06-05-welcome-letter/</guid><description>This is my first exercise of website development.
I did not intend to build a blogging website. I was reading through the tutorial at codecademy about building a static website.
Then it leads me to Jekyll which is a static website generator written in Ruby. In my opinion, Jekyll is a handy and simple framework that would get you started on the way of Web Development.
Next, I&amp;rsquo;m going to refine the styling of this website step by step.</description></item><item><title>About me</title><link>https://zonggen.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/about/</guid><description>I&amp;rsquo;m a software engineer that also codes for fun. Contact me at carpe.diem.allen@gmail.com.
Find my OpenPGP public key here.</description></item></channel></rss>