<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>systemd on Zonggen's Blog</title><link>https://zonggen.github.io/categories/systemd/</link><description>Recent content in systemd on Zonggen's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Zonggen Bai</copyright><lastBuildDate>Thu, 24 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zonggen.github.io/categories/systemd/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a Daemon process with Systemd</title><link>https://zonggen.github.io/posts/2019-10-24-systemd-daemon/</link><pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2019-10-24-systemd-daemon/</guid><description>Just want to make a note on how to create a daemon process with systemd service file. When I&amp;rsquo;m working on Fedora CoreOS Pinger client side, the following systemd service file will hang at the boot process and eventually timeout afer 1m34s.
[Unit] Description=Telemetry service for Fedora CoreOS Documentation=https://github.com/coreos/fedora-coreos-pinger Before=systemd-user-sessions.service Wants=network-online.target After=network-online.target [Service] DynamicUser=yes Type=forking StateDirectory=fedora-coreos-pinger ExecStart=/usr/libexec/fedora-coreos-pinger [Install] WantedBy=multi-user.target The reason behind this is that systemd expects the process called by ExecStart= to call fork() and terminate the parent process so that the child processs could be orphaned and finally become a Daemon process that running in the background.</description></item></channel></rss>