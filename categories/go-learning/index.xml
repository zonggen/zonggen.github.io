<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go-learning on Zonggen's Blog</title><link>https://zonggen.github.io/categories/go-learning/</link><description>Recent content in go-learning on Zonggen's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Zonggen Bai</copyright><lastBuildDate>Mon, 18 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://zonggen.github.io/categories/go-learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Fibonacci Closure in #Golang</title><link>https://zonggen.github.io/posts/2018-06-18-fibonacci-closure-in-golang/</link><pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate><guid>https://zonggen.github.io/posts/2018-06-18-fibonacci-closure-in-golang/</guid><description>Referring to the Go Tutorial, Go has closures, which allows us to return functions that can access and bound to the variables outside of their bodies. Basically, the variable is distinct among different specific instance of closures.
Here is an implementation of the function fibonacci that prints successive fibonacci numbers using a closure (from Go Tutorial exercise):
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // fibonacci is a function that returns // a function that returns an int.</description></item></channel></rss>